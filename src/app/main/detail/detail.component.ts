import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute, ParamMap } from '@angular/router';
import { ContactService } from '../shared/services/contact.service'
import { AddressService } from '../shared/services/address.service'
import { CountriesService } from '../shared/services/countries.service'
import { Contact } from '../shared/models/contact.model'
import { Address } from '../shared/models/address.model'

@Component({
  selector: 'app-detail',
  templateUrl: './detail.component.html',
  styleUrls: ['./detail.component.css']
})
export class DetailComponent implements OnInit {
  contact: Contact = new Contact('', '', '', '');
  addresses: Address[] = [];
  countries: Object;
  constructor(
    private router: Router,
    private dataRoute: ActivatedRoute,
    public contactService: ContactService,
    public addressService: AddressService,
    public countriesService: CountriesService,
  ) {

  }
  getContact(id) {
    this.contactService.getContact(id)
      .subscribe(res => {
        this.contact = res as Contact;
        this.getAddresses();
        console.log(res);
      })

    //TODO GET ADDRESSES 
  }
  getAddresses() {
    this.addressService.getAdresssesByContact(this.contact.id)
      .subscribe(res => {
        this.addresses = res as Address[];
        console.log(res);
      })
  }
  getCountries(){
    this.countriesService.getCountries()
    .subscribe(res => {
      this.countries = res; 
      console.log(res); 
    })
  }
  ngOnInit(): void {
    console.log(this.dataRoute.snapshot.paramMap.get('id'));
    this.getCountries(); 
    this.getContact(this.dataRoute.snapshot.paramMap.get('id'));

  }
  addAddress() {
    this.addresses.push(new Address('','','',''))
  }

  goBack() {
    this.router.navigate(['/contacts']);
  }
  onSubmit() {
    for(let address  of this.addresses){
      //If address id does not exist, it's a new adress
      if(!address.id){
        address.contactId = this.contact.id; 
        /*The id will be autogenerated by the contactid, the user keyword, the length of the address and the miliseconds. TODO: Anyway, this is not safe
        /*and ids must be managed better in a refined version. */
        address.id = address.contactId + "user" + this.addresses.length + new Date().getUTCMilliseconds();
        this.addressService.addAdress(address).subscribe(res => { //TODO: Set a promise allSettled, wait for all the addresses to finish before get them.
          this.getAddresses(); 
        });
      }
      //if address id exist, we have to edit the address //TODO, check if the address has any changes. If that's the case, don't edit.
      else{
        this.addressService.editAdress(address).subscribe(res => {
          this.getAddresses(); 
        })
      }
    }
  }
  deleteAddress(address){
    this.addressService.deleteAdress(address.id).subscribe(res => {
      this.getAddresses(); 
    })
  }
}
